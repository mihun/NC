/* 1. Создать логическую БД названием Вашеимя_eav */
CREATE USER BALUTA_EAV IDENTIFIED BY aa11;
GRANT CONNECT, RESOURCE TO BALUTA_EAV;

/* 2. В БД создать таблицы БД типа EAV/CR. */
drop table OBJTYPE CASCADE CONSTRAINTS;
drop table ATTRTYPE CASCADE CONSTRAINTS;
drop table OBJECTS CASCADE CONSTRAINTS;
drop table ATTRIBUTES CASCADE CONSTRAINTS;
drop table OBJREFERENCE CASCADE CONSTRAINTS;

CREATE TABLE OBJTYPE
  (
    OBJECT_TYPE_ID NUMBER(20) NOT NULL ENABLE,
    PARENT_ID      NUMBER(20),
    CODE           VARCHAR2(20) NOT NULL UNIQUE,
    NAME           VARCHAR2(200 BYTE),
    DESCRIPTION    VARCHAR2(1000 BYTE),
    CONSTRAINT CON_OBJECT_TYPE_ID PRIMARY KEY (OBJECT_TYPE_ID),
    CONSTRAINT CON_PARENT_ID FOREIGN KEY (PARENT_ID) REFERENCES OBJTYPE (OBJECT_TYPE_ID) ON DELETE CASCADE ENABLE
  );
CREATE TABLE ATTRTYPE (
    ATTR_ID      		NUMBER(20) NOT NULL ENABLE,
    OBJECT_TYPE_ID 		NUMBER(20) NOT NULL ENABLE,
	OBJECT_TYPE_ID_REF 	NUMBER(20),
    CODE         		VARCHAR2(20),
    NAME         		VARCHAR2(200 BYTE),
    CONSTRAINT CON_ATTR_ID PRIMARY KEY (ATTR_ID),
    CONSTRAINT CON_ATTR_OBJECT_TYPE_ID FOREIGN KEY (OBJECT_TYPE_ID) REFERENCES OBJTYPE (OBJECT_TYPE_ID) ENABLE,
	CONSTRAINT CON_ATTR_OBJECT_TYPE_ID_REF FOREIGN KEY (OBJECT_TYPE_ID_REF) REFERENCES OBJTYPE (OBJECT_TYPE_ID) ENABLE
);
CREATE TABLE OBJECTS (
    OBJECT_ID      NUMBER(20) NOT NULL ENABLE,
    PARENT_ID      NUMBER(20),
    OBJECT_TYPE_ID NUMBER(20) NOT NULL ENABLE,
    NAME           VARCHAR2(2000 BYTE),
    DESCRIPTION    VARCHAR2(4000 BYTE),
    CONSTRAINT CON_OBJECTS_ID PRIMARY KEY (OBJECT_ID),
    CONSTRAINT CON_PARENTS_ID FOREIGN KEY (PARENT_ID) REFERENCES OBJECTS (OBJECT_ID) ON DELETE CASCADE DEFERRABLE ENABLE,
    CONSTRAINT CON_OBJ_TYPE_ID FOREIGN KEY (OBJECT_TYPE_ID) REFERENCES OBJTYPE (OBJECT_TYPE_ID) ENABLE
);
CREATE TABLE ATTRIBUTES
  (
    ATTR_ID    NUMBER(20) NOT NULL ENABLE,
    OBJECT_ID  NUMBER(20) NOT NULL ENABLE,
    VALUE      VARCHAR2(4000 BYTE),
    DATE_VALUE DATE,
	CONSTRAINT CON_ATTRIBUTES_PK PRIMARY KEY (ATTR_ID,OBJECT_ID),
    CONSTRAINT CON_AOBJECT_ID FOREIGN KEY (OBJECT_ID) REFERENCES OBJECTS (OBJECT_ID) ON DELETE CASCADE ENABLE,
    CONSTRAINT CON_AATTR_ID FOREIGN KEY (ATTR_ID) REFERENCES ATTRTYPE (ATTR_ID) ON DELETE CASCADE ENABLE
  );  
CREATE TABLE OBJREFERENCE
  (
    ATTR_ID   NUMBER(20) NOT NULL ENABLE,
    REFERENCE NUMBER(20) NOT NULL ENABLE,
    OBJECT_ID NUMBER(20) NOT NULL ENABLE,
	CONSTRAINT CON_OBJREFERENCE_PK PRIMARY KEY (ATTR_ID,REFERENCE,OBJECT_ID),
    CONSTRAINT CON_REFERENCE FOREIGN KEY (REFERENCE) REFERENCES OBJECTS (OBJECT_ID) ON DELETE CASCADE ENABLE,
    CONSTRAINT CON_ROBJECT_ID FOREIGN KEY (OBJECT_ID) REFERENCES OBJECTS (OBJECT_ID) ON DELETE CASCADE ENABLE,
    CONSTRAINT CON_RATTR_ID FOREIGN KEY (ATTR_ID) REFERENCES ATTRTYPE (ATTR_ID) ON DELETE CASCADE ENABLE
  ); 
  

/* 3. Для классов из UML-диаграммы, описывающих города и подразделения, заполнить описания типов
объектов, типов атрибутов. */
INSERT INTO OBJTYPE (OBJECT_TYPE_ID,PARENT_ID,CODE,NAME,DESCRIPTION) VALUES (1,NULL,'LOCATION','Местонахождение',NULL);
INSERT INTO OBJTYPE (OBJECT_TYPE_ID,PARENT_ID,CODE,NAME,DESCRIPTION) VALUES (2,1,'DEPARTMENT','Подразделение',NULL);

INSERT INTO ATTRTYPE (ATTR_ID,OBJECT_TYPE_ID,OBJECT_TYPE_ID_REF,CODE,NAME) VALUES (1,1,NULL,'COUNTRY','Страна');
INSERT INTO ATTRTYPE (ATTR_ID,OBJECT_TYPE_ID,OBJECT_TYPE_ID_REF,CODE,NAME) VALUES (2,1,NULL,'CITY','Город');
INSERT INTO ATTRTYPE (ATTR_ID,OBJECT_TYPE_ID,OBJECT_TYPE_ID_REF,CODE,NAME) VALUES (3,1,NULL,'STREET_ADRESS','Адресс');
INSERT INTO ATTRTYPE (ATTR_ID,OBJECT_TYPE_ID,OBJECT_TYPE_ID_REF,CODE,NAME) VALUES (4,2,NULL,'NAME','Название');


/* 4. Для каждого класса создать по два экземпляра объекта, заполнив соответствующие таблицы. */
INSERT INTO OBJECTS (OBJECT_ID,PARENT_ID,OBJECT_TYPE_ID,NAME,DESCRIPTION) VALUES (1,NULL,1,'loc1',NULL);
INSERT INTO OBJECTS (OBJECT_ID,PARENT_ID,OBJECT_TYPE_ID,NAME,DESCRIPTION) VALUES (2,NULL,1,'loc2',NULL);

INSERT INTO OBJECTS (OBJECT_ID,PARENT_ID,OBJECT_TYPE_ID,NAME,DESCRIPTION) VALUES (3,1,2,'dept1',NULL);
INSERT INTO OBJECTS (OBJECT_ID,PARENT_ID,OBJECT_TYPE_ID,NAME,DESCRIPTION) VALUES (4,2,2,'dept2',NULL);

INSERT INTO ATTRIBUTES (ATTR_ID,OBJECT_ID,VALUE,DATE_VALUE) VALUES (1,1,'England',NULL);
INSERT INTO ATTRIBUTES (ATTR_ID,OBJECT_ID,VALUE,DATE_VALUE) VALUES (2,1,'London',NULL);
INSERT INTO ATTRIBUTES (ATTR_ID,OBJECT_ID,VALUE,DATE_VALUE) VALUES (3,1,'Oat Lane 15',NULL);
INSERT INTO ATTRIBUTES (ATTR_ID,OBJECT_ID,VALUE,DATE_VALUE) VALUES (1,2,'France',NULL);
INSERT INTO ATTRIBUTES (ATTR_ID,OBJECT_ID,VALUE,DATE_VALUE) VALUES (2,2,'Paris',NULL);
INSERT INTO ATTRIBUTES (ATTR_ID,OBJECT_ID,VALUE,DATE_VALUE) VALUES (3,2,'Rue Euler 7',NULL);
INSERT INTO ATTRIBUTES (ATTR_ID,OBJECT_ID,VALUE,DATE_VALUE) VALUES (4,3,'London IT Office',NULL);
INSERT INTO ATTRIBUTES (ATTR_ID,OBJECT_ID,VALUE,DATE_VALUE) VALUES (4,4,'Paris Sales Office',NULL);

/* 5. Выполнить запрос к БД, который получает название городов и подразделений. */

SELECT attr_loc.VALUE city, attr_dept.VALUE dept_name
from objects LOC, OBJECTS DEPT, ATTRIBUTES attr_loc, ATTRIBUTES attr_dept
WHERE LOC.OBJECT_TYPE_ID = 1 /* LOCATION */
AND DEPT.OBJECT_TYPE_ID = 2 /* DEPARTMENT */
AND DEPT.PARENT_ID = LOC.OBJECT_ID
AND attr_dept.OBJECT_ID = DEPT.OBJECT_ID
AND attr_loc.OBJECT_ID = LOC.OBJECT_ID
AND attr_loc.ATTR_ID = 2 /* CITY */
AND attr_dept.ATTR_ID = 4; /* NAME */

/*
CITY     DEPT_NAME
-------  ----------------------
London	 London IT Office
Paris	 Paris Sales Office
*/


/* 6. Для классов из UML-диаграммы, описывающих сотрудников, заполнить описания типов объектов,
типов атрибутов. */
INSERT INTO OBJTYPE (OBJECT_TYPE_ID,PARENT_ID,CODE,NAME,DESCRIPTION) VALUES (3,NULL,'EMPLOYEE','Сотрудник',NULL);
INSERT INTO OBJTYPE (OBJECT_TYPE_ID,PARENT_ID,CODE,NAME,DESCRIPTION) VALUES (4,3,'MANAGER','Менеджер',NULL);

INSERT INTO ATTRTYPE (ATTR_ID,OBJECT_TYPE_ID,OBJECT_TYPE_ID_REF,CODE,NAME) VALUES (5,3,NULL,'NAME','Фамилия');
INSERT INTO ATTRTYPE (ATTR_ID,OBJECT_TYPE_ID,OBJECT_TYPE_ID_REF,CODE,NAME) VALUES (6,3,NULL,'JOB','Должность');
INSERT INTO ATTRTYPE (ATTR_ID,OBJECT_TYPE_ID,OBJECT_TYPE_ID_REF,CODE,NAME) VALUES (7,3,NULL,'SAL','Зарплата');
INSERT INTO ATTRTYPE (ATTR_ID,OBJECT_TYPE_ID,OBJECT_TYPE_ID_REF,CODE,NAME) VALUES (8,3,NULL,'HIREDATE','Дата приема на работу');

INSERT INTO ATTRTYPE (ATTR_ID,OBJECT_TYPE_ID,OBJECT_TYPE_ID_REF,CODE,NAME) VALUES (9,4,NULL,'RANK','Ранг');

INSERT INTO ATTRTYPE (ATTR_ID,OBJECT_TYPE_ID,OBJECT_TYPE_ID_REF,CODE,NAME) VALUES (10,3,2,'WORK','Работа');
INSERT INTO ATTRTYPE (ATTR_ID,OBJECT_TYPE_ID,OBJECT_TYPE_ID_REF,CODE,NAME) VALUES (11,3,4,'MANAGE','Управление');

/* 7. Для каждого класса создать по два экземпляра объекта, заполнив соответствующие таблицы. */

INSERT INTO OBJECTS (OBJECT_ID,PARENT_ID,OBJECT_TYPE_ID,NAME,DESCRIPTION) VALUES (5,NULL,3,'emp1',NULL);
INSERT INTO OBJECTS (OBJECT_ID,PARENT_ID,OBJECT_TYPE_ID,NAME,DESCRIPTION) VALUES (6,NULL,3,'emp2',NULL);

INSERT INTO OBJECTS (OBJECT_ID,PARENT_ID,OBJECT_TYPE_ID,NAME,DESCRIPTION) VALUES (7,NULL,3,'emp3',NULL);
INSERT INTO OBJECTS (OBJECT_ID,PARENT_ID,OBJECT_TYPE_ID,NAME,DESCRIPTION) VALUES (8,NULL,3,'emp4',NULL);
INSERT INTO OBJECTS (OBJECT_ID,PARENT_ID,OBJECT_TYPE_ID,NAME,DESCRIPTION) VALUES (9,7,4,'mng1',NULL);
INSERT INTO OBJECTS (OBJECT_ID,PARENT_ID,OBJECT_TYPE_ID,NAME,DESCRIPTION) VALUES (10,8,4,'mng2',NULL);

INSERT INTO ATTRIBUTES (ATTR_ID,OBJECT_ID,VALUE,DATE_VALUE) VALUES (5,5,'Ivanov',NULL);
INSERT INTO ATTRIBUTES (ATTR_ID,OBJECT_ID,VALUE,DATE_VALUE) VALUES (6,5,'Programmer',NULL);
INSERT INTO ATTRIBUTES (ATTR_ID,OBJECT_ID,VALUE,DATE_VALUE) VALUES (7,5,'5600',NULL);
INSERT INTO ATTRIBUTES (ATTR_ID,OBJECT_ID,VALUE,DATE_VALUE) VALUES (8,5,NULL,'10-JUL-1999');

INSERT INTO ATTRIBUTES (ATTR_ID,OBJECT_ID,VALUE,DATE_VALUE) VALUES (5,6,'Petrov',NULL);
INSERT INTO ATTRIBUTES (ATTR_ID,OBJECT_ID,VALUE,DATE_VALUE) VALUES (6,6,'Accountant',NULL);
INSERT INTO ATTRIBUTES (ATTR_ID,OBJECT_ID,VALUE,DATE_VALUE) VALUES (7,6,'4700',NULL);
INSERT INTO ATTRIBUTES (ATTR_ID,OBJECT_ID,VALUE,DATE_VALUE) VALUES (8,6,NULL,'03-FEB-2001');

INSERT INTO ATTRIBUTES (ATTR_ID,OBJECT_ID,VALUE,DATE_VALUE) VALUES (5,7,'Sidorov',NULL);
INSERT INTO ATTRIBUTES (ATTR_ID,OBJECT_ID,VALUE,DATE_VALUE) VALUES (6,7,'IT Manager',NULL);
INSERT INTO ATTRIBUTES (ATTR_ID,OBJECT_ID,VALUE,DATE_VALUE) VALUES (7,7,'9200',NULL);
INSERT INTO ATTRIBUTES (ATTR_ID,OBJECT_ID,VALUE,DATE_VALUE) VALUES (8,7,NULL,'15-OCT-1997');

INSERT INTO ATTRIBUTES (ATTR_ID,OBJECT_ID,VALUE,DATE_VALUE) VALUES (5,8,'Andreev',NULL);
INSERT INTO ATTRIBUTES (ATTR_ID,OBJECT_ID,VALUE,DATE_VALUE) VALUES (6,8,'Sales Manager',NULL);
INSERT INTO ATTRIBUTES (ATTR_ID,OBJECT_ID,VALUE,DATE_VALUE) VALUES (7,8,'8100',NULL);
INSERT INTO ATTRIBUTES (ATTR_ID,OBJECT_ID,VALUE,DATE_VALUE) VALUES (8,8,NULL,'22-DEC-1998');

INSERT INTO ATTRIBUTES (ATTR_ID,OBJECT_ID,VALUE,DATE_VALUE) VALUES (9,9,'2',NULL);
INSERT INTO ATTRIBUTES (ATTR_ID,OBJECT_ID,VALUE,DATE_VALUE) VALUES (9,10,'1',NULL);

INSERT INTO OBJREFERENCE (ATTR_ID,OBJECT_ID,REFERENCE) VALUES (10,5,3);
INSERT INTO OBJREFERENCE (ATTR_ID,OBJECT_ID,REFERENCE) VALUES (10,6,4);
INSERT INTO OBJREFERENCE (ATTR_ID,OBJECT_ID,REFERENCE) VALUES (10,7,3);
INSERT INTO OBJREFERENCE (ATTR_ID,OBJECT_ID,REFERENCE) VALUES (10,8,4);

INSERT INTO OBJREFERENCE (ATTR_ID,OBJECT_ID,REFERENCE) VALUES (11,5,9);
INSERT INTO OBJREFERENCE (ATTR_ID,OBJECT_ID,REFERENCE) VALUES (11,7,10);

/* 8. Выполнить запрос к БД, который получает фамилию сотрудников и зарплату сотрудников. */
SELECT attr_emp_name.VALUE NAME, attr_emp_sal.VALUE SALARY
from OBJECTS EMP, ATTRIBUTES attr_emp_name, ATTRIBUTES attr_emp_sal
WHERE EMP.OBJECT_TYPE_ID = 3 /* EMPLOYEE */
AND attr_emp_name.OBJECT_ID = EMP.OBJECT_ID
AND attr_emp_sal.OBJECT_ID = EMP.OBJECT_ID
AND attr_emp_name.ATTR_ID = 5 /* NAME */
AND attr_emp_sal.ATTR_ID = 7; /* SAL */
/*
NAME      SALARY
--------  --------
Ivanov	  5600
Petrov	  4700
Sidorov	  9200
Andreev	  8100
*/


/* 9. Выполнить запрос к БД, который:
- получает названия подразделений;
- получает фамилии сотрудников, работающих в указанных подразделениях;
- подразделения расположены в одном из городов, название которого ранее было внесено. */
SELECT attr_dept_name.VALUE DEPT_NAME, attr_emp_name.VALUE NAME
from OBJECTS DEPT, ATTRIBUTES attr_dept_name, OBJECTS EMP, ATTRIBUTES attr_emp_name,OBJREFERENCE obj_ref, OBJECTS LOC
WHERE DEPT.OBJECT_TYPE_ID = 2 /* DEPARTMENT */
AND attr_dept_name.OBJECT_ID = DEPT.OBJECT_ID
AND EMP.OBJECT_TYPE_ID = 3 /* EMP */
AND attr_emp_name.OBJECT_ID = EMP.OBJECT_ID
AND attr_emp_name.ATTR_ID = 5 /* NAME of EMP*/
AND attr_dept_name.ATTR_ID = 4 /* NAME of DEPT */
AND obj_ref.ATTR_ID = 10 /* WORK */
AND obj_ref.OBJECT_ID = EMP.OBJECT_ID
AND obj_ref.REFERENCE = DEPT.OBJECT_ID
AND (LOC.OBJECT_ID = 1 OR LOC.OBJECT_ID = 2) /* London or Paris */
AND DEPT.PARENT_ID = LOC.OBJECT_ID;
/*
DEPT_NAME            NAME
-------------------  ----------
London IT Office	 Ivanov
Paris Sales Office	 Petrov
London IT Office	 Sidorov
Paris Sales Office	 Andreev
*/

/* 10. Создать множество запросов типа INSERT INTO … SELECT, которые автоматически заполнят
таблицы объектов, атрибутов и связей, взяв данные из реляционной БД, использующейся в 4-й работе с
именем old_db. */

INSERT INTO BALUTA_EAV.OBJECTS (OBJECT_ID,PARENT_ID,OBJECT_TYPE_ID,NAME,DESCRIPTION)
        SELECT loc.LOCATION_ID, null, 1, 'loc'||loc.LOCATION_ID, null           /* OBJECT_ID range: 1000 ... 3200 */
        FROM OLD_DB.LOCATIONS loc
        UNION
        SELECT dept.DEPARTMENT_ID + 500, dept.LOCATION_ID, 2, 'dept'||(dept.DEPARTMENT_ID+500), null   /* OBJECT_ID range(+500): 510 ... 770 */
        FROM OLD_DB.DEPARTMENTS dept
        UNION
        SELECT emp.EMPLOYEE_ID, null, 3, 'emp'||emp.EMPLOYEE_ID, null        /* OBJECT_ID range: 100 ... 206 */
        FROM OLD_DB.EMPLOYEES emp
        UNION
        SELECT DISTINCT mng.EMPLOYEE_ID+200, mng.EMPLOYEE_ID, 4, 'mng'||(mng.EMPLOYEE_ID+200), null    /* OBJECT_ID range(+200): 300 ... 406 */
        FROM OLD_DB.EMPLOYEES emp, OLD_DB.EMPLOYEES mng
        WHERE  emp.MANAGER_ID=mng.EMPLOYEE_ID;
commit;
/*
175 rows inserted.
Commit complete.
*/

INSERT INTO BALUTA_EAV.ATTRIBUTES (ATTR_ID,OBJECT_ID,VALUE,DATE_VALUE)
        SELECT 1, loc.LOCATION_ID, cntry.COUNTRY_NAME, null      /* attr COUNTRY --> LOCATION */
        FROM OLD_DB.LOCATIONS loc JOIN OLD_DB.COUNTRIES cntry ON (loc.COUNTRY_ID = cntry.COUNTRY_ID )
        UNION
        SELECT 2, loc.LOCATION_ID, loc.CITY, null			/* attr CITY --> LOCATION */
        FROM OLD_DB.LOCATIONS loc
        UNION
        SELECT 3, loc.LOCATION_ID, loc.STREET_ADDRESS, null     /* attr STREET_ADDRESS --> LOCATION */
        FROM OLD_DB.LOCATIONS loc
        UNION
        SELECT 4, dept.DEPARTMENT_ID+500, dept.DEPARTMENT_NAME, null   /* attr NAME --> DEPARTMENT */
        FROM OLD_DB.DEPARTMENTS dept
        UNION
        SELECT 5, emp.EMPLOYEE_ID, emp.FIRST_NAME||' '||emp.LAST_NAME, null    /* attr NAME --> EMPLOYEE */
        FROM OLD_DB.EMPLOYEES emp
        UNION
        SELECT 6, emp.EMPLOYEE_ID, j.JOB_TITLE, null        /* attr JOB --> EMPLOYEE */
        FROM OLD_DB.EMPLOYEES emp JOIN OLD_DB.JOBS j ON (emp.JOB_ID = j.JOB_ID)
        UNION
        SELECT 7, emp.EMPLOYEE_ID, emp.SALARY, null        /* attr SAL --> EMPLOYEE */
        FROM OLD_DB.EMPLOYEES emp
        UNION
        SELECT 8, emp.EMPLOYEE_ID, null, emp.HIRE_DATE      /* attr HIREDATE --> EMPLOYEE */
        FROM OLD_DB.EMPLOYEES emp
        UNION
        SELECT DISTINCT 9, mng.EMPLOYEE_ID+200, 2, null      /* attr RANK --> MANAGER */
        FROM OLD_DB.EMPLOYEES emp, OLD_DB.EMPLOYEES mng
        WHERE  emp.MANAGER_ID=mng.EMPLOYEE_ID ;
commit;
/*
542 rows inserted.
Commit complete.
*/

INSERT INTO BALUTA_EAV.OBJREFERENCE (ATTR_ID,OBJECT_ID,REFERENCE)
        SELECT 10, emp.EMPLOYEE_ID, emp.DEPARTMENT_ID+500       /* ATTR_ID  = 10  WORK */
        FROM OLD_DB.EMPLOYEES emp JOIN OLD_DB.DEPARTMENTS dept ON (emp.DEPARTMENT_ID = dept.DEPARTMENT_ID)
        UNION
        SELECT 11, emp.EMPLOYEE_ID, emp.MANAGER_ID              /* ATTR_ID  = 11  MANAGE */
        FROM OLD_DB.EMPLOYEES emp JOIN OLD_DB.EMPLOYEES mng ON (emp.MANAGER_ID = mng.EMPLOYEE_ID);
commit;

/*
212 rows inserted.
Commit complete.
*/

/* 11. Выполнить запрос, который:
- получает фамилию, должность, номер подразделения сотрудников
- сотрудники работают в городе Toronto.
*/
SELECT attr_emp_name.VALUE name, attr_emp_job.VALUE job, dept.OBJECT_ID dept_id
FROM OBJECTS emp, ATTRIBUTES attr_emp_name, ATTRIBUTES attr_emp_job, OBJECTS dept, OBJECTS loc, ATTRIBUTES attr_loc_city, OBJREFERENCE obj_ref
WHERE emp.OBJECT_TYPE_ID = 3 /* EMPLOYEE */
AND attr_emp_name.OBJECT_ID = emp.OBJECT_ID
AND attr_emp_name.ATTR_ID = 5 /* attr NAME of emp */
AND attr_emp_job.OBJECT_ID = emp.OBJECT_ID
AND attr_emp_job.ATTR_ID = 6 /* attr JOB of emp */
AND dept.OBJECT_TYPE_ID = 2 /* DEPARTMENT */
AND obj_ref.ATTR_ID = 10 /* WORK */
AND obj_ref.OBJECT_ID = emp.OBJECT_ID
AND obj_ref.REFERENCE = dept.OBJECT_ID
AND loc.OBJECT_TYPE_ID = 1 /* LOCATION */
AND attr_loc_city.OBJECT_ID = loc.OBJECT_ID
AND attr_loc_city.VALUE = 'Toronto'
AND loc.OBJECT_ID = dept.PARENT_ID;

/*
NAME                 JOB                         DEPT_ID
------------------   -------------------------   --------
Pat Fay	             Marketing Representativ     520
Michael Hartstein	 Marketing Manager	         520
*/

/* 12. Выполнить запрос, который:
- получает номера и фамилии сотрудников;
- у сотрудников менеджером является сотрудник по имени John Russell.
*/
SELECT emp.OBJECT_ID emp_id, attr_emp_name.VALUE NAME
FROM OBJECTS emp, ATTRIBUTES attr_emp_name, OBJECTS mng, OBJECTS emp_mng, ATTRIBUTES attr_mng_name, OBJREFERENCE obj_ref
WHERE emp.OBJECT_TYPE_ID = 3 /* EMPLOYEE */
AND attr_emp_name.OBJECT_ID = emp.OBJECT_ID
AND attr_emp_name.ATTR_ID = 5 /* attr NAME of emp */
AND mng.OBJECT_TYPE_ID = 4 /* MANAGER */
AND emp_mng.OBJECT_TYPE_ID = 3 /* EMPLOYEE */
AND mng.PARENT_ID = emp_mng.OBJECT_ID /* managers in EMP*/
AND attr_mng_name.OBJECT_ID = emp_mng.OBJECT_ID
AND attr_mng_name.VALUE = 'John Russell'
AND obj_ref.ATTR_ID = 11 /* MANAGE */
AND obj_ref.OBJECT_ID = emp.OBJECT_ID
AND obj_ref.REFERENCE = emp_mng.OBJECT_ID;

/*
EMP_ID   NAME
-------  -----------------
150	     Peter Tucker
151	     David Bernstein
152	     Peter Hall
153	     Christopher Olsen
154	     Nanette Cambrault
155	     Oliver Tuvault
*/










